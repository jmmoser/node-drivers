/* eslint-disable no-undef */

const CIPRequest = require('../../src/layers/cip/core/request');

describe('Encoding', () => {
  test('Encode', () => {
    expect(
      new CIPRequest(0x01, Buffer.from([0x20, 0x02, 0x24, 0x01])).encode(),
    ).toEqual(
      Buffer.from([0x01, 0x02, 0x20, 0x02, 0x24, 0x01]),
    );
  });

  test('Encode Multi', () => {
    expect(
      new CIPRequest.Multi([
        new CIPRequest(
          0x4C,
          Buffer.from([0x91, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x00]),
          Buffer.from([0x01, 0x00]),
        ),
        new CIPRequest(
          0x4C,
          Buffer.from([
            0x91, 0x0B, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x57, 0x6F, 0x72, 0x64, 0x00,
          ]),
          Buffer.from([0x01, 0x00]),
        ),
      ]).encode(),
    ).toEqual(
      Buffer.from([
        0x0A,
        0x02,
        0x20, 0x02, 0x24, 0x01,
        0x02, 0x00,
        0x06, 0x00,
        0x12, 0x00,
        0x4C, 0x04, 0x91, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x00, 0x01, 0x00,
        0x4C, 0x07, 0x91, 0x0B, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x57, 0x6F, 0x72, 0x64, 0x00, 0x01, 0x00
      ]),
    );
  });
});

describe('Decoding', () => {
  test('Decode Multi', () => {
    const request1 = new CIPRequest(
      0x4C,
      Buffer.from([0x91, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x00]),
      Buffer.from([0x01, 0x00]),
    );

    const request2 = new CIPRequest(
      0x4C,
      Buffer.from([
        0x91, 0x0B, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F,
        0x6C, 0x57, 0x6F, 0x72, 0x64, 0x00,
      ]),
      Buffer.from([0x01, 0x00]),
    );

    const multiRequest = new CIPRequest.Multi([
      request1,
      request2,
    ]);

    const responseBuffer = Buffer.from([
      0x8A,
      0x00,
      0x00,
      0x00,
      0x02, 0x00,
      0x06, 0x00,
      0x10, 0x00,
      0xCC, 0x00, 0x00, 0x00,
      0xC4, 0x00,
      0x2A, 0x00, 0x00, 0x00,
      0xCC, 0x00, 0x00, 0x00,
      0xC4, 0x00,
      0xDC, 0x01, 0x00, 0x00,
    ]);

    const response = multiRequest.response(responseBuffer, 0);

    expect(response.service.code).toBe(10);
    expect(response.status.code).toBe(0);
    expect(response.value).toHaveLength(2);
  });
});
